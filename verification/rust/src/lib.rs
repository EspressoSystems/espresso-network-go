use std::str::FromStr;

use ark_ff::{BigInteger, PrimeField};
use ark_serialize::CanonicalSerialize;
use committable::{Commitment, Committable};
use espresso_types::{
    BlockMerkleCommitment, BlockMerkleTree, Header, NsProof, NsTable, Transaction,
};
use ethers::types::U256;
use hotshot_query_service::VidCommon;
use hotshot_types::{data::VidCommitment, light_client::hash_bytes_to_field};
use jf_merkle_tree::prelude::{
    MerkleCommitment, MerkleNode, MerkleProof, MerkleTreeScheme, Sha3Node,
};
use sha2::{Digest, Sha256};
use tagged_base64::TaggedBase64;

pub type Proof = Vec<MerkleNode<Commitment<Header>, u64, Sha3Node>>;
pub type CircuitField = ark_ed_on_bn254::Fq;

macro_rules! handle_result {
    ($result:expr) => {
        match $result {
            Ok(value) => value,
            Err(err) => {
                println!(
                    "encountered error while handling result in rust<-go bindings {:?}",
                    err
                );
                return false;
            }
        }
    };
}

// Helper function to verify a block merkle proof.
// proof_bytes: Byte representation of a block merkle proof.
// root_bytes: Byte representation of a Sha3Node merkle root.
// header_bytes: Byte representation of the HotShot header being validated as a Merkle leaf.
// circuit_block_bytes: Circuit representation of the HotShot header commitment returned by the light client contract.
#[no_mangle]
pub extern "C" fn verify_merkle_proof_helper(
    proof_ptr: *const u8,
    proof_len: usize,
    header_ptr: *const u8,
    header_len: usize,
    block_comm_ptr: *const u8,
    block_comm_len: usize,
    circuit_block_ptr: *const u8,
    circuit_block_len: usize,
) -> bool {
    let proof_bytes = handle_result!(slice_from_raw_parts(proof_ptr, proof_len));
    let header_bytes = handle_result!(slice_from_raw_parts(header_ptr, header_len));
    let block_comm_bytes = handle_result!(slice_from_raw_parts(block_comm_ptr, block_comm_len));
    let circuit_block_bytes =
        handle_result!(slice_from_raw_parts(circuit_block_ptr, circuit_block_len));

    let block_comm_str = handle_result!(std::str::from_utf8(block_comm_bytes));
    let tagged = handle_result!(TaggedBase64::parse(&block_comm_str));
    let block_comm: BlockMerkleCommitment = handle_result!(tagged.try_into());
    let proof: Proof = handle_result!(serde_json::from_slice(proof_bytes));
    let header: Header = handle_result!(serde_json::from_slice(header_bytes));
    let header_comm: Commitment<Header> = header.commit();

    let proof = MerkleProof::new(header.height(), proof.to_vec());
    let proved_comm = if let Some(p) = proof.elem() {
        p.clone()
    } else {
        return false;
    };
    handle_result!(handle_result!(BlockMerkleTree::verify(
        block_comm.digest(),
        header.height(),
        proof
    )));

    let mut block_comm_root_bytes = vec![];
    handle_result!(block_comm.serialize_compressed(&mut block_comm_root_bytes));
    let field_bytes = handle_result!(hash_bytes_to_field::<CircuitField>(&block_comm_root_bytes));
    let local_block_comm_u256 = field_to_u256(field_bytes);
    let circuit_block_comm_u256 = U256::from_little_endian(circuit_block_bytes);

    if proved_comm != header_comm {
        return false;
    }

    if local_block_comm_u256 != circuit_block_comm_u256 {
        return false;
    }
    return true;
}

// Helper function to verify a VID namespace proof that takes the byte representations of the proof,
// namespace table, and commitment string.
//
// proof_bytes: Byte representation of a JSON NamespaceProof string.
// commit_bytes: Byte representation of a TaggedBase64 payload commitment string.
// ns_table_bytes: Raw bytes of the namespace table.
// tx_comm_bytes: Byte representation of a hex encoded Sha256 digest that the transaction set commits to.
#[no_mangle]
pub extern "C" fn verify_namespace_helper(
    namespace: u64,
    proof_ptr: *const u8,
    proof_len: usize,
    commit_ptr: *const u8,
    commit_len: usize,
    ns_table_ptr: *const u8,
    ns_table_len: usize,
    tx_comm_ptr: *const u8,
    tx_comm_len: usize,
    common_data_ptr: *const u8,
    common_data_len: usize,
) -> bool {
    let ns_table_bytes = handle_result!(slice_from_raw_parts(ns_table_ptr, ns_table_len));
    let proof_bytes = handle_result!(slice_from_raw_parts(proof_ptr, proof_len));
    let commit_bytes = handle_result!(slice_from_raw_parts(commit_ptr, commit_len));
    let tx_comm_bytes = handle_result!(slice_from_raw_parts(tx_comm_ptr, tx_comm_len));
    let common_data_bytes = handle_result!(slice_from_raw_parts(common_data_ptr, common_data_len));

    let commit_str = handle_result!(std::str::from_utf8(commit_bytes));
    let txn_comm_str = handle_result!(std::str::from_utf8(tx_comm_bytes));
    let serde_result: Result<NsProof, serde_json::Error> = serde_json::from_slice(proof_bytes);
    println!("serde_json result for ns_proof {:?}", serde_result);
    let proof: NsProof = handle_result!(serde_json::from_slice(proof_bytes));
    let ns_table: NsTable = NsTable::from_bytes_unchecked(ns_table_bytes);
    let tagged = handle_result!(TaggedBase64::parse(&commit_str));
    let commit: VidCommitment = handle_result!(tagged.try_into());
    let vid_common: VidCommon = handle_result!(serde_json::from_slice(common_data_bytes));
    println!(
        "NS_TABLE{:?},\n COMMIT{:?},\n VID_COMMON{:?}\n",
        ns_table, commit, vid_common
    );
    let verify_result = proof.verify(&ns_table, &commit, &vid_common);
    println!("verify_result {:?}", verify_result);
    let (txns, ns) = handle_result!(proof.verify(&ns_table, &commit, &vid_common).ok_or(()));

    let namespace: u32 = handle_result!(namespace.try_into());
    let txns_comm = hash_txns(namespace, &txns);

    if (ns == namespace.into()) && (txns_comm == txn_comm_str) {
        return true;
    }
    return false;
}

#[test]
fn test_namespace_proof_with_real_data() {
    let payload_commitment = "AvidMCommit~anzlRML5pXo4_gkbyba4FhNmLtiRV1DbLa4IDZwqJfXF";
    let vid_common = r#"{"V1": {"total_weights": 100, "recovery_threshold": 34}}"#;
    let ns_table = r#"{"bytes":"DAAAABAnAAAXBAAAEScAANUIAAASJwAAuAwAABMnAADXEAAAFCcAAOgUAAAVJwAAqhkAABYnAAAjHwAAFycAAFIkAAAYJwAA5SYAABknAAAsLAAAGicAAJ8vAABpcmFy00IAAA=="}"#;

    let ns_proof = r#"{
      "V1": {
        "ns_index": 11,
        "ns_payload": [1, 0, 0, 0, 44, 19, 0, 0, 0, 0, 0, 0, 0, 0, 18, 126, 3, 0, 2, 0, 0, 0, 0, 0, 11, 0, 16, 0, 147, 154, 114, 51, 247, 156, 76, 169, 148, 10, 13, 179, 149, 127, 6, 7, 105, 59, 80, 131, 112, 194, 111, 234, 53, 41, 157, 151, 183, 155, 165, 81, 0, 0, 0, 0, 14, 14, 16, 15, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 18, 183, 24, 133, 235, 222, 231, 238, 77, 40, 62, 225, 8, 103, 176, 57, 163, 97, 53, 170, 253, 104, 196, 95, 20, 95, 32, 0, 223, 51, 38, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 200, 98, 203, 46, 126, 31, 68, 159, 54, 161, 139, 24, 172, 160, 140, 32, 254, 174, 208, 212, 17, 36, 120, 22, 194, 129, 213, 150, 66, 12, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 13, 117, 176, 107, 202, 61, 254, 67, 20, 2, 165, 131, 158, 9, 167, 195, 212, 133, 152, 102, 234, 6, 9, 45, 122, 142, 210, 134, 219, 110, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 16, 0, 0, 98, 34, 175, 58, 53, 65, 207, 123, 136, 170, 201, 92, 127, 33, 16, 238, 36, 208, 139, 57, 144, 131, 90, 92, 162, 43, 45, 69, 108, 161, 113, 83, 172, 194, 7, 31, 93, 160, 97, 59, 146, 112, 160, 63, 58, 106, 95, 213, 53, 81, 116, 25, 200, 137, 57, 84, 43, 167, 119, 56, 62, 208, 187, 90, 199, 187, 66, 200, 144, 11, 37, 48, 230, 183, 121, 4, 65, 29, 134, 70, 143, 134, 213, 165, 214, 15, 134, 95, 195, 160, 154, 61, 168, 148, 57, 134, 230, 145, 188, 144, 101, 223, 102, 191, 217, 205, 211, 140, 191, 208, 198, 221, 193, 7, 174, 250, 76, 122, 44, 33, 3, 252, 22, 51, 79, 39, 158, 5, 14, 14, 16, 15, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 120, 254, 140, 253, 1, 9, 90, 15, 16, 138, 255, 92, 64, 98, 75, 147, 97, 45, 108, 40, 183, 62, 26, 141, 40, 23, 156, 157, 223, 14, 6, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 79, 87, 117, 215, 150, 80, 62, 150, 19, 127, 119, 198, 138, 130, 154, 0, 86, 172, 141, 237, 112, 20, 11, 8, 27, 9, 68, 144, 197, 123, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 159, 136, 112, 167, 97, 131, 169, 105, 229, 109, 34, 62, 35, 13, 212, 46, 95, 122, 6, 150, 113, 249, 208, 169, 98, 186, 227, 179, 188, 155, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 127, 43, 207, 245, 240, 249, 31, 187, 98, 25, 58, 11, 190, 184, 173, 241, 1, 239, 138, 231, 111, 97, 7, 34, 225, 92, 12, 14, 250, 133, 233, 180, 210, 207, 4, 52, 148, 45, 124, 25, 13, 22, 45, 95, 107, 253, 173, 122, 228, 212, 178, 253, 123, 188, 59, 26, 4, 218, 61, 49, 16, 157, 235, 32, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 5, 0, 98, 14, 0, 0, 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 69, 56, 106, 67, 67, 66, 74, 109, 103, 65, 119, 73, 66, 65, 103, 73, 86, 65, 79, 115, 87, 67, 103, 72, 43, 99, 104, 87, 110, 111, 101, 102, 50, 47, 76, 77, 56, 107, 47, 70, 109, 56, 110, 68, 55, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57, 66, 65, 77, 67, 10, 77, 72, 65, 120, 73, 106, 65, 103, 66, 103, 78, 86, 66, 65, 77, 77, 71, 85, 108, 117, 100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 81, 81, 48, 115, 103, 85, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 10, 69, 85, 108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 10, 67, 65, 119, 67, 81, 48, 69, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108, 86, 84, 77, 66, 52, 88, 68, 84, 73, 48, 77, 84, 73, 121, 78, 122, 65, 119, 77, 84, 81, 49, 78, 108, 111, 88, 68, 84, 77, 120, 77, 84, 73, 121, 78, 122, 65, 119, 77, 84, 81, 49, 10, 78, 108, 111, 119, 99, 68, 69, 105, 77, 67, 65, 71, 65, 49, 85, 69, 65, 119, 119, 90, 83, 87, 53, 48, 90, 87, 119, 103, 85, 48, 100, 89, 73, 70, 66, 68, 83, 121, 66, 68, 90, 88, 74, 48, 97, 87, 90, 112, 89, 50, 70, 48, 90, 84, 69, 97, 77, 66, 103, 71, 65, 49, 85, 69, 10, 67, 103, 119, 82, 83, 87, 53, 48, 90, 87, 119, 103, 81, 50, 57, 121, 99, 71, 57, 121, 89, 88, 82, 112, 98, 50, 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 99, 77, 67, 49, 78, 104, 98, 110, 82, 104, 73, 69, 78, 115, 89, 88, 74, 104, 77, 81, 115, 119, 67, 81, 89, 68, 10, 86, 81, 81, 73, 68, 65, 74, 68, 81, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 66, 104, 77, 67, 86, 86, 77, 119, 87, 84, 65, 84, 66, 103, 99, 113, 104, 107, 106, 79, 80, 81, 73, 66, 66, 103, 103, 113, 104, 107, 106, 79, 80, 81, 77, 66, 66, 119, 78, 67, 65, 65, 83, 53, 10, 116, 66, 84, 67, 75, 79, 83, 47, 120, 120, 82, 98, 77, 113, 116, 108, 75, 88, 68, 86, 83, 103, 100, 69, 83, 120, 113, 97, 112, 83, 116, 108, 51, 85, 75, 49, 99, 71, 114, 119, 119, 118, 84, 79, 68, 52, 119, 70, 108, 97, 52, 47, 77, 109, 49, 56, 85, 119, 50, 117, 113, 109, 121, 113, 10, 65, 117, 108, 98, 119, 120, 43, 72, 109, 83, 80, 117, 100, 43, 102, 119, 79, 99, 82, 70, 111, 52, 73, 68, 68, 106, 67, 67, 65, 119, 111, 119, 72, 119, 89, 68, 86, 82, 48, 106, 66, 66, 103, 119, 70, 111, 65, 85, 108, 87, 57, 100, 122, 98, 48, 98, 52, 101, 108, 65, 83, 99, 110, 85, 10, 57, 68, 80, 79, 65, 86, 99, 76, 51, 108, 81, 119, 97, 119, 89, 68, 86, 82, 48, 102, 66, 71, 81, 119, 89, 106, 66, 103, 111, 70, 54, 103, 88, 73, 90, 97, 97, 72, 82, 48, 99, 72, 77, 54, 76, 121, 57, 104, 99, 71, 107, 117, 100, 72, 74, 49, 99, 51, 82, 108, 90, 72, 78, 108, 10, 99, 110, 90, 112, 89, 50, 86, 122, 76, 109, 108, 117, 100, 71, 86, 115, 76, 109, 78, 118, 98, 83, 57, 122, 90, 51, 103, 118, 89, 50, 86, 121, 100, 71, 108, 109, 97, 87, 78, 104, 100, 71, 108, 118, 98, 105, 57, 50, 77, 121, 57, 119, 89, 50, 116, 106, 99, 109, 119, 47, 89, 50, 69, 57, 10, 99, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 109, 90, 87, 53, 106, 98, 50, 82, 112, 98, 109, 99, 57, 90, 71, 86, 121, 77, 66, 48, 71, 65, 49, 85, 100, 68, 103, 81, 87, 66, 66, 84, 88, 100, 55, 57, 78, 89, 88, 114, 113, 112, 117, 66, 107, 56, 88, 100, 120, 114, 69, 81, 74, 10, 109, 85, 84, 90, 82, 84, 65, 79, 66, 103, 78, 86, 72, 81, 56, 66, 65, 102, 56, 69, 66, 65, 77, 67, 66, 115, 65, 119, 68, 65, 89, 68, 86, 82, 48, 84, 65, 81, 72, 47, 66, 65, 73, 119, 65, 68, 67, 67, 65, 106, 115, 71, 67, 83, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 10, 65, 81, 83, 67, 65, 105, 119, 119, 103, 103, 73, 111, 77, 66, 52, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 69, 69, 69, 73, 57, 52, 122, 121, 108, 118, 71, 87, 74, 115, 50, 118, 79, 104, 54, 47, 119, 50, 85, 49, 115, 119, 103, 103, 70, 108, 66, 103, 111, 113, 10, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 77, 73, 73, 66, 86, 84, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 65, 81, 73, 66, 68, 106, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 65, 103, 73, 66, 10, 68, 106, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 65, 119, 73, 66, 65, 122, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 66, 65, 73, 66, 65, 122, 65, 82, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 10, 68, 81, 69, 67, 66, 81, 73, 67, 65, 80, 56, 119, 69, 81, 89, 76, 75, 111, 90, 73, 104, 118, 104, 78, 65, 81, 48, 66, 65, 103, 89, 67, 65, 103, 68, 47, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 72, 65, 103, 69, 66, 77, 66, 65, 71, 10, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 73, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 74, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 75, 10, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 76, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 77, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 10, 84, 81, 69, 78, 65, 81, 73, 78, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 79, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 80, 65, 103, 69, 65, 77, 66, 65, 71, 10, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 81, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 82, 65, 103, 69, 78, 77, 66, 56, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 83, 10, 66, 66, 65, 79, 68, 103, 77, 68, 47, 47, 56, 66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 77, 66, 65, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 77, 69, 65, 103, 65, 65, 77, 66, 81, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 10, 65, 81, 81, 69, 66, 103, 66, 103, 97, 103, 65, 65, 65, 68, 65, 80, 66, 103, 111, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 70, 67, 103, 69, 66, 77, 66, 52, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 89, 69, 69, 73, 54, 108, 119, 49, 98, 48, 10, 85, 97, 89, 122, 79, 55, 113, 52, 89, 101, 81, 74, 71, 80, 119, 119, 82, 65, 89, 75, 75, 111, 90, 73, 104, 118, 104, 78, 65, 81, 48, 66, 66, 122, 65, 50, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 99, 66, 65, 81, 72, 47, 77, 66, 65, 71, 10, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 99, 67, 65, 81, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 99, 68, 65, 81, 69, 65, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57, 66, 65, 77, 67, 65, 48, 99, 65, 10, 77, 69, 81, 67, 73, 70, 109, 97, 66, 97, 75, 89, 80, 53, 73, 80, 79, 122, 83, 76, 71, 67, 102, 80, 99, 87, 56, 104, 111, 88, 113, 122, 121, 48, 97, 50, 108, 87, 101, 73, 88, 78, 84, 102, 79, 56, 72, 111, 65, 105, 66, 69, 78, 67, 122, 88, 82, 99, 56, 86, 57, 43, 108, 70, 10, 112, 112, 70, 75, 83, 54, 105, 66, 79, 67, 86, 43, 98, 118, 48, 68, 66, 76, 57, 86, 86, 52, 115, 107, 101, 89, 48, 118, 106, 65, 61, 61, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 108, 106, 67, 67, 65, 106, 50, 103, 65, 119, 73, 66, 65, 103, 73, 86, 65, 74, 86, 118, 88, 99, 50, 57, 71, 43, 72, 112, 81, 69, 110, 74, 49, 80, 81, 122, 122, 103, 70, 88, 67, 57, 53, 85, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57, 66, 65, 77, 67, 10, 77, 71, 103, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 77, 77, 69, 85, 108, 117, 100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 83, 98, 50, 57, 48, 73, 69, 78, 66, 77, 82, 111, 119, 71, 65, 89, 68, 86, 81, 81, 75, 68, 66, 70, 74, 98, 110, 82, 108, 98, 67, 66, 68, 10, 98, 51, 74, 119, 98, 51, 74, 104, 100, 71, 108, 118, 98, 106, 69, 85, 77, 66, 73, 71, 65, 49, 85, 69, 66, 119, 119, 76, 85, 50, 70, 117, 100, 71, 69, 103, 81, 50, 120, 104, 99, 109, 69, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 103, 77, 65, 107, 78, 66, 77, 81, 115, 119, 10, 67, 81, 89, 68, 86, 81, 81, 71, 69, 119, 74, 86, 85, 122, 65, 101, 70, 119, 48, 120, 79, 68, 65, 49, 77, 106, 69, 120, 77, 68, 85, 119, 77, 84, 66, 97, 70, 119, 48, 122, 77, 122, 65, 49, 77, 106, 69, 120, 77, 68, 85, 119, 77, 84, 66, 97, 77, 72, 65, 120, 73, 106, 65, 103, 10, 66, 103, 78, 86, 66, 65, 77, 77, 71, 85, 108, 117, 100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 81, 81, 48, 115, 103, 85, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69, 85, 108, 117, 100, 71, 86, 115, 10, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 67, 65, 119, 67, 81, 48, 69, 120, 10, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108, 86, 84, 77, 70, 107, 119, 69, 119, 89, 72, 75, 111, 90, 73, 122, 106, 48, 67, 65, 81, 89, 73, 75, 111, 90, 73, 122, 106, 48, 68, 65, 81, 99, 68, 81, 103, 65, 69, 78, 83, 66, 47, 55, 116, 50, 49, 108, 88, 83, 79, 10, 50, 67, 117, 122, 112, 120, 119, 55, 52, 101, 74, 66, 55, 50, 69, 121, 68, 71, 103, 87, 53, 114, 88, 67, 116, 120, 50, 116, 86, 84, 76, 113, 54, 104, 75, 107, 54, 122, 43, 85, 105, 82, 90, 67, 110, 113, 82, 55, 112, 115, 79, 118, 103, 113, 70, 101, 83, 120, 108, 109, 84, 108, 74, 108, 10, 101, 84, 109, 105, 50, 87, 89, 122, 51, 113, 79, 66, 117, 122, 67, 66, 117, 68, 65, 102, 66, 103, 78, 86, 72, 83, 77, 69, 71, 68, 65, 87, 103, 66, 81, 105, 90, 81, 122, 87, 87, 112, 48, 48, 105, 102, 79, 68, 116, 74, 86, 83, 118, 49, 65, 98, 79, 83, 99, 71, 114, 68, 66, 83, 10, 66, 103, 78, 86, 72, 82, 56, 69, 83, 122, 66, 74, 77, 69, 101, 103, 82, 97, 66, 68, 104, 107, 70, 111, 100, 72, 82, 119, 99, 122, 111, 118, 76, 50, 78, 108, 99, 110, 82, 112, 90, 109, 108, 106, 89, 88, 82, 108, 99, 121, 53, 48, 99, 110, 86, 122, 100, 71, 86, 107, 99, 50, 86, 121, 10, 100, 109, 108, 106, 90, 88, 77, 117, 97, 87, 53, 48, 90, 87, 119, 117, 89, 50, 57, 116, 76, 48, 108, 117, 100, 71, 86, 115, 85, 48, 100, 89, 85, 109, 57, 118, 100, 69, 78, 66, 76, 109, 82, 108, 99, 106, 65, 100, 66, 103, 78, 86, 72, 81, 52, 69, 70, 103, 81, 85, 108, 87, 57, 100, 10, 122, 98, 48, 98, 52, 101, 108, 65, 83, 99, 110, 85, 57, 68, 80, 79, 65, 86, 99, 76, 51, 108, 81, 119, 68, 103, 89, 68, 86, 82, 48, 80, 65, 81, 72, 47, 66, 65, 81, 68, 65, 103, 69, 71, 77, 66, 73, 71, 65, 49, 85, 100, 69, 119, 69, 66, 47, 119, 81, 73, 77, 65, 89, 66, 10, 65, 102, 56, 67, 65, 81, 65, 119, 67, 103, 89, 73, 75, 111, 90, 73, 122, 106, 48, 69, 65, 119, 73, 68, 82, 119, 65, 119, 82, 65, 73, 103, 88, 115, 86, 107, 105, 48, 119, 43, 105, 54, 86, 89, 71, 87, 51, 85, 70, 47, 50, 50, 117, 97, 88, 101, 48, 89, 74, 68, 106, 49, 85, 101, 10, 110, 65, 43, 84, 106, 68, 49, 97, 105, 53, 99, 67, 73, 67, 89, 98, 49, 83, 65, 109, 68, 53, 120, 107, 102, 84, 86, 112, 118, 111, 52, 85, 111, 121, 105, 83, 89, 120, 114, 68, 87, 76, 109, 85, 82, 52, 67, 73, 57, 78, 75, 121, 102, 80, 78, 43, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 106, 122, 67, 67, 65, 106, 83, 103, 65, 119, 73, 66, 65, 103, 73, 85, 73, 109, 85, 77, 49, 108, 113, 100, 78, 73, 110, 122, 103, 55, 83, 86, 85, 114, 57, 81, 71, 122, 107, 110, 66, 113, 119, 119, 67, 103, 89, 73, 75, 111, 90, 73, 122, 106, 48, 69, 65, 119, 73, 119, 10, 97, 68, 69, 97, 77, 66, 103, 71, 65, 49, 85, 69, 65, 119, 119, 82, 83, 87, 53, 48, 90, 87, 119, 103, 85, 48, 100, 89, 73, 70, 74, 118, 98, 51, 81, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69, 85, 108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 10, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 67, 65, 119, 67, 81, 48, 69, 120, 67, 122, 65, 74, 10, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108, 86, 84, 77, 66, 52, 88, 68, 84, 69, 52, 77, 68, 85, 121, 77, 84, 69, 119, 78, 68, 85, 120, 77, 70, 111, 88, 68, 84, 81, 53, 77, 84, 73, 122, 77, 84, 73, 122, 78, 84, 107, 49, 79, 86, 111, 119, 97, 68, 69, 97, 77, 66, 103, 71, 10, 65, 49, 85, 69, 65, 119, 119, 82, 83, 87, 53, 48, 90, 87, 119, 103, 85, 48, 100, 89, 73, 70, 74, 118, 98, 51, 81, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69, 85, 108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48, 10, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 67, 65, 119, 67, 81, 48, 69, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 10, 65, 108, 86, 84, 77, 70, 107, 119, 69, 119, 89, 72, 75, 111, 90, 73, 122, 106, 48, 67, 65, 81, 89, 73, 75, 111, 90, 73, 122, 106, 48, 68, 65, 81, 99, 68, 81, 103, 65, 69, 67, 54, 110, 69, 119, 77, 68, 73, 89, 90, 79, 106, 47, 105, 80, 87, 115, 67, 122, 97, 69, 75, 105, 55, 10, 49, 79, 105, 79, 83, 76, 82, 70, 104, 87, 71, 106, 98, 110, 66, 86, 74, 102, 86, 110, 107, 89, 52, 117, 51, 73, 106, 107, 68, 89, 89, 76, 48, 77, 120, 79, 52, 109, 113, 115, 121, 89, 106, 108, 66, 97, 108, 84, 86, 89, 120, 70, 80, 50, 115, 74, 66, 75, 53, 122, 108, 75, 79, 66, 10, 117, 122, 67, 66, 117, 68, 65, 102, 66, 103, 78, 86, 72, 83, 77, 69, 71, 68, 65, 87, 103, 66, 81, 105, 90, 81, 122, 87, 87, 112, 48, 48, 105, 102, 79, 68, 116, 74, 86, 83, 118, 49, 65, 98, 79, 83, 99, 71, 114, 68, 66, 83, 66, 103, 78, 86, 72, 82, 56, 69, 83, 122, 66, 74, 10, 77, 69, 101, 103, 82, 97, 66, 68, 104, 107, 70, 111, 100, 72, 82, 119, 99, 122, 111, 118, 76, 50, 78, 108, 99, 110, 82, 112, 90, 109, 108, 106, 89, 88, 82, 108, 99, 121, 53, 48, 99, 110, 86, 122, 100, 71, 86, 107, 99, 50, 86, 121, 100, 109, 108, 106, 90, 88, 77, 117, 97, 87, 53, 48, 10, 90, 87, 119, 117, 89, 50, 57, 116, 76, 48, 108, 117, 100, 71, 86, 115, 85, 48, 100, 89, 85, 109, 57, 118, 100, 69, 78, 66, 76, 109, 82, 108, 99, 106, 65, 100, 66, 103, 78, 86, 72, 81, 52, 69, 70, 103, 81, 85, 73, 109, 85, 77, 49, 108, 113, 100, 78, 73, 110, 122, 103, 55, 83, 86, 10, 85, 114, 57, 81, 71, 122, 107, 110, 66, 113, 119, 119, 68, 103, 89, 68, 86, 82, 48, 80, 65, 81, 72, 47, 66, 65, 81, 68, 65, 103, 69, 71, 77, 66, 73, 71, 65, 49, 85, 100, 69, 119, 69, 66, 47, 119, 81, 73, 77, 65, 89, 66, 65, 102, 56, 67, 65, 81, 69, 119, 67, 103, 89, 73, 10, 75, 111, 90, 73, 122, 106, 48, 69, 65, 119, 73, 68, 83, 81, 65, 119, 82, 103, 73, 104, 65, 79, 87, 47, 53, 81, 107, 82, 43, 83, 57, 67, 105, 83, 68, 99, 78, 111, 111, 119, 76, 117, 80, 82, 76, 115, 87, 71, 102, 47, 89, 105, 55, 71, 83, 88, 57, 52, 66, 103, 119, 84, 119, 103, 10, 65, 105, 69, 65, 52, 74, 48, 108, 114, 72, 111, 77, 115, 43, 88, 111, 53, 111, 47, 115, 88, 54, 79, 57, 81, 87, 120, 72, 82, 65, 118, 90, 85, 71, 79, 100, 82, 81, 55, 99, 118, 113, 82, 88, 97, 113, 73, 61, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 0, 0, 0, 0, 0, 0, 12, 1, 224, 0, 0, 0, 0, 0, 0, 0, 150, 248, 148, 248, 142, 225, 3, 148, 164, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 101, 113, 117, 101, 110, 99, 101, 114, 131, 124, 209, 111, 132, 104, 9, 13, 12, 192, 128, 184, 106, 4, 248, 103, 130, 77, 196, 133, 11, 164, 59, 116, 0, 131, 30, 132, 128, 148, 83, 213, 56, 93, 137, 120, 114, 187, 129, 153, 48, 155, 231, 8, 16, 252, 9, 229, 140, 229, 1, 128, 28, 160, 240, 100, 1, 213, 41, 43, 146, 167, 188, 189, 205, 102, 12, 56, 234, 134, 165, 153, 110, 133, 223, 162, 139, 234, 226, 52, 135, 46, 52, 69, 216, 231, 160, 67, 84, 194, 150, 31, 156, 7, 41, 58, 20, 111, 143, 216, 35, 228, 238, 61, 214, 167, 75, 26, 136, 125, 26, 174, 107, 52, 245, 53, 1, 102, 218, 131, 1, 226, 220],
        "ns_proof": "MERKLE_PROOF~AwAAAAAAAAACAAAAAAAAANAKiO-Eelpmnw55mFUKK5gS_NuDxMYfVylcraDAq9ahbFiOqGkoenQcDm4jzIQ59UzfIqg_12fFVNMRCxp2LAwCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAABFrExICp-tvOsCqa7Hy260cFtPsAwLqN4yfYWYd6b3eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP"
      }
    }"#;

    let tagged = TaggedBase64::parse(payload_commitment).unwrap();
    let commit: VidCommitment = tagged.try_into().unwrap();
    let vid_common: VidCommon = serde_json::from_str(vid_common).unwrap();
    let ns_table: NsTable = serde_json::from_str(ns_table).unwrap();
    let proof: NsProof = serde_json::from_str(ns_proof).unwrap();
    proof.verify(&ns_table, &commit, &vid_common).unwrap();
}

// TODO: Use Commit trait: https://github.com/EspressoSystems/nitro-espresso-integration/issues/88
fn hash_txns(namespace: u32, txns: &[Transaction]) -> String {
    let mut hasher = Sha256::new();
    hasher.update(namespace.to_le_bytes());
    for txn in txns {
        hasher.update(txn.payload());
    }
    let hash_result = hasher.finalize();
    format!("{:x}", hash_result)
}

pub fn field_to_u256<F: PrimeField>(f: F) -> U256 {
    if F::MODULUS_BIT_SIZE > 256 {
        panic!("Shouldn't convert a >256-bit field to U256");
    }
    U256::from_little_endian(&f.into_bigint().to_bytes_le())
}

fn slice_from_raw_parts<'a>(ptr: *const u8, len: usize) -> Result<&'a [u8], String> {
    if ptr.is_null() {
        return Err(String::from_str("ptr is null").unwrap());
    }
    if !ptr.is_aligned() {
        return Err(String::from_str("ptr is not aligned").unwrap());
    }
    // Check if the range overflows
    if usize::MAX - (ptr as usize) < len {
        return Err(String::from_str("range overflow").unwrap());
    }
    Ok(unsafe { std::slice::from_raw_parts(ptr, len) })
}

#[derive(Clone, Debug, serde::Serialize, serde::Deserialize)]
pub struct NamespaceProofQueryData {
    pub proof: Option<NsProof>,
    pub transactions: Vec<crate::Transaction>,
}

#[test]
fn test_ns_proof() {
    use espresso_types::SeqTypes;
    use hotshot_query_service::availability::VidCommonQueryData;
    let ns_table_str = std::fs::read_to_string("../../resp/rari_namespace_table.json").unwrap();
    let ns_proof_str = std::fs::read_to_string("../../resp/rari_namespace_header.json").unwrap();
    let ns_table_str = r#"{"bytes":"DAAAABAnAAAXBAAAEScAANUIAAASJwAAuAwAABMnAADXEAAAFCcAAOgUAAAVJwAAqhkAABYnAAAjHwAAFycAAFIkAAAYJwAA5SYAABknAAAsLAAAGicAAJ8vAABpcmFy00IAAA=="}"#;
    let common_str = std::fs::read_to_string("../../resp/rari_vid_common.json").unwrap();

    let ns_table: NsTable = serde_json::from_str(&ns_table_str).unwrap();
    let ns_proof: NamespaceProofQueryData = serde_json::from_str(&ns_proof_str).unwrap();
    let ns_proof = ns_proof.proof.unwrap();
    // let commit: VidCommitment = serde_json::from_str(commit_str).unwrap();
    let common_qd: VidCommonQueryData<SeqTypes> = serde_json::from_str(&common_str).unwrap();
    let common = common_qd.common();
    let commit = common_qd.payload_hash();

    let result = ns_proof.verify(&ns_table, &commit, common);

    println!("{result:?}");
}
